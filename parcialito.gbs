Punto 1)
Escriba la función protectoraConAnimalesVacunadosConAntirrabicaSiCorrespondeEn_ que dada una
protectora, describe la protectora con todos los animales que tienen más de 2 meses de edad con la Antirrábica
incluida en sus vacunas, esta vacuna se aplica una unica vez, si ya fue aplicada, no debe aplicarse nuevamente.
Para solucionar este problema puede hacer uso de la función primitiva contieneLaVacuna_En_, que dado un tipo
de vacuna y una lista de vacunas, indica si la vacuna con el tipo dado existe en la lista dada
function protectoraConAnimalesVacunadosConAntirrabicaSiCorrespondeEn_(protectora){
    /*  Proposito: describe la protectora dada con todos los animales que tienen mas de 2 meses de edad con la antirrabica incluida en sus vacunas,
        Precondiciones: la lista de animales no debe estar vacia.
        Parametros: protectora, ProtectoraDeAnimales.
        Tipo: ProtectoraDeAnimales*/
    listaDeAnimalesVacunados := []
    foreach animal in animales(protectora) {
        // aca tendria que agregar una funcion que para vacunar sai corresponde o no. pero encare bien la resolucion

        listaDeAnimalesVacunados := listaDeAnimalesVacunados ++ [singular_Si_(animal,  contieneLaVacuna_En_(vacuna, vacunas(animal)) && esAnimal_Con_(animal,mesesDeEdad(animal)))]
    }
    return(ProtectoraDeAnimales(protectoraDeAnimales | animales <- listaDeAnimalesVacunados))
}
function animalCon_(animal, edad){
    /*  Proposito: indica si el animales tiene 2 meses de edad.
        Precondicion: ninguna.
        Parametros: edad. Numero.
                    animal: Animal
        Tipo:Booleano*/
        return(mesesDeEdad(animal) >= 2)
}
// SOLUCION IGUAL PERO VACUNANDO
function protectoraConAnimalesVacunadosConAntirrabicaSiCorrespondeEn_(protectora) {
    /*  PROPÓSITO: describe una protectora con todos los animales de la misma que tienen más de 2 meses
        de edad con la antirrábica incluida entre sus vacunas        
        PARÁMETROS:
            * protectora: ProtectoraDeAnimales
        TIPO: ProtectoraDeAnimales
        PRECONDICIONES: no tiene      */        
    return (ProtectoraDeAnimales(protectora |
                                 animales <- animalesDe_VacunadosConAntirrábicaSiCorresponde(animales(protectora))))
}
function animalesDe_VacunadosConAntirrábicaSiCorresponde(listaDeAnimales) {
     /* PROPÓSITO: describe una lista de animales con todos los animales que tienen más de 2 meses
        de edad con la antirrábica incluida entre sus vacunas        
        PARÁMETROS:
            * listaDeAnimales: [Animal]
        TIPO: [Animal]
        PRECONDICIONES: no tiene 
        OBSERVACIONES: es un recorrido de transformación      */    
    animalesConAntirrabicaIncluidaHastaAhora := []
    foreach animal in listaDeAnimales {
        animalesConAntirrabicaIncluidaHastaAhora := snoc(animalesConAntirrabicaIncluidaHastaAhora,
                                                         animal_VacunadoSiCorresponde(animal))   
    }
    return (animalesConAntirrabicaIncluidaHastaAhora)
}
function animal_VacunadoSiCorresponde(animal) {
    /*  PROPÓSITO: describe un animal con la vacuna antirrábica incluida entre sus vacunas, si éste tiene más de
        dos meses de edad y aún no ha sido vacunado
        PARÁMETROS:
            animal: Animal
        TIPO: Animal
        PRECONDICIONES: no tiene*/    
    return (choose animal_VacunadoCon_(animal, Antirrábica) when (correspondeAntirrábicaA_(animal))
                   animal                                   otherwise)
}
function correspondeAntirrábicaA_(animal) {
    /*  PROPÓSITO: indica si corresponde la aplicación de la vacuna antirrábica al animal dado
        PARÁMETROS:
            * animal: Animal
        TIPO: Booleano
        PRECONDICIONES: no tiene */    
    return (not contieneLaVacuna_En_(Antirrábica, vacunas(animal))
            &&
            mesesDeEdad(animal) > 2)
}
function animal_VacunadoCon_(animal, tipoDeVacuna) {
    /*  PROPÓSITO: describe el animal con la vacuna del tipo de vacuna dado agregada a sus vacunas
        PARÁMETROS:
            * animal: Animal
            * tipoDeVacuna: TipoDeVacuna
        TIPO: Animal
        PRECONDICIONES: no tiene
    */    
    return (Animal(animal |
                   vacunas <- vacunas(animal) ++ [vacunaDeTipo_(tipoDeVacuna)]))
}
function vacunaDeTipo_(tipoDeVacuna) {
    /*  PROPÓSITO: describe una vacuna del tipo dado, con la fecha de hoy
        PARÁMETROS:
            * tipoDeVacuna: TipoDeVacuna            
        TIPO: Vacuna
        PRECONDICIONES: no tiene*/    
    return (Vacuna(tipo            <- tipoDeVacuna,
                   fechaAplicacion <- fechaDeHoy()))
}
Punto 2)
Escriba la función nombreDeAnimalesDisponiblesParaAdopcionEn_ que dada una protectora, describe una lista
con los nombres de los animales que están aptos para ser adoptados. Un animal está apto para ser adoptado
cuando tiene más de 2 meses de edad, no está en recuperación ,cuando entre sus vacunas tiene :
- Para los gatos: La antirrábica, la triple felina y la de moquillo
- Para los perros: la antirrábica, la polivalente y la del moquillo
- para los conejos: la antirrábica y el moquillo
- para los pájaros: ninguna.
Como estrategia pensar una subtarea que dado un animal, reconoce la especie del animal y en base a esto evaluar
si tiene las vacunas necesarias para ser adoptado
function nombreDeAnimalesDisponiblesParaAdopcionEn_(protectora){
    /*  Proposito: describe una lista con los nombres de los animales que estan aptos para ser adoptados.
        Precondicion: no tiene
        Parametros: protectora: ProtectoraDeAnimales
        Tipo: [nombres]*/
    listaDeNombresDeAnimales := []
    foreach animal in animales(protectora) {
    listaDeNombresDeAnimales := listaDeNombresDeAnimales ++ [singular_Si_(nombre)(animal),// es mejor sepuedeadoptar es buen nombre
                                                            (esMayorA2MesesEl_YTieneLasVacunasSegunSuEspecie(animal)
                                                             && not enRecuperacion(animal))]
}
    return (listaDeNombresDeAnimales)
}
function esMayorA2Meses_YTieneLasVacunasSiEs_Del_(animal){
    /*  Proposito: indica si la edad es mayor a 2 meses y si la especia al que corresponde tiene todas las vacunas de dicha especie.
        Precondicion: la edad debe ser positivo.
        Parametros:  animal: Animal
        Tipo: Booleano.*/
    return(mesesDeEdad(animal) >= 2 && (tieneLasVacunasSegunSuEspecie_(animal) || especie(animal == "pajaro"))
}
function tieneLasVacunasSegunSuEspecie_(animal){
    /*  Proposito: indica si la "especie" dada tiene las vacunas que corresponde.
        Precondicion: ninguna.
        Parametros: animal: Animal
        Tipo: Booleano*/
    return(elAnimal_tieneTodasLasVascunas(animal))
}
// opcion de saba
function vacunasNecesaariasParaAnimnalEspecie_(especie){
    /*...*/
    return( choose [Antirrabica, tripleFelina, moquillo] when (especie == gatos)
                    [Antirrabica, Polivalente, moquillo] when (especie == perros)
                    [Antirrabica, , moquillo]            when (especie == conejos)
                    []                                   otherwise)
}
function elAnimal_tieneTodasLasVascunas(animal){
    /*...*/
    vacunasARecorrer := vacunasNecesaariasParaAnimnalEspecie_(especie(animal))
    while(not esVacía(vacunasARecorrer) && contieneLaVacuna_En_(primero(vacunasARecorrer),vacunas(animal))){
        vacunasARecorrer := resto(vacunasARecorrer)
    }
    return(esVacía(vacunasARecorrer))
}
// Punto 3)
// Escriba la función animalesDelCuidador_QueFueronadoptadosEn_ que dado el nombre de un cuidador y
// una protectora, describe la lista de animales que fueron adoptados y estaban a cargo del cuidador dado.Tener en
// cuenta que podrían existir cuidadores que aun no participaron de ninguna adopción
function animalesDelCuidador_QueFueronAdoptadosEn_(nombreDeCuidador, protectora) {
    /*  PROPÓSITO: describe una lista de animales que fueron adoptados y estaban a cargo del cuidador dado
        PARÁMETROS:
            * nombreDeCuidador: String
            * protectora: ProtectoraDeAnimales
        TIPO: [Animal]
        PRECONDICIONES: el cuidador dado se encuentra en la protectora dada*/    
    return (animalesDe_QueEstuvieronACargoDe_(
        animalesAdoptadosEn_(protectora),
        cuidador_DeProtectora_(nombreDeCuidador, protectora)
    ))
}
function cuidador_DeProtectora_(nombreDeCuidador, protectora) {
    /*  PROPÓSITO: describe al cuidador de nombre dado en la protectora dada
        PARÁMETROS:
            * nombreDeCuidador: String
            * protectora: Protectora
        TIPO: Cuidador
        PRECONDICIONES:
        Existe el cuidador con el nombre dado en la protectora dada
        OBSERVACIONES:
        Es un recorrido de búsqueda*/
    cuidadoresAProcesar := cuidadores(protectora)
    while(not nombreDeCuidador == nombre(primero(cuidadoresAProcesar))) {
        cuidadoresAProcesar := resto(cuidadoresAProcesar)
    }
    return (primero(cuidadoresAProcesar))
}
function animalesAdoptadosEn_(protectora) {
    /*  PROPÓSITO: describe una lista de animales que han sido adoptados en la protectora
        PARÁMETROS:
            * protectora: ProtectoraDeAnimales            
        TIPO: [Animal]
        PRECONDICIONES: no tiene
        OBSERVACIONES: es un recorrido de filtro*/
    animalesAdoptadosHastaAhora := []
    foreach animal in animales(protectora) {
        animalesAdoptadosHastaAhora := animalesAdoptadosHastaAhora ++
                                       singular_Si_(animal,
                                                    animal_FueAdoptadoEn_(animal, adopciones(protectora)))
    }    
    return (animalesAdoptadosHastaAhora)
}
function animal_FueAdoptadoEn_(animal, listaDeAdopciones) {
    /*  PROPÓSITO: indica si el animal dado se encuentra en la lista de adopciones dada
        PARÁMETROS:
            * animal: Animal
            * listaDeAdopciones: [Adopción]
        TIPO: Booleano
        PRECONDICIONES: no tiene
        OBSERVACIONES: es un recorrido de búsqueda*/
    adopcionesAProcesar := listaDeAdopciones
    while(not esVacía(adopcionesAProcesar)
          &&
          not animal_EsElDeAdopción_(animal, primero(adopcionesAProcesar))) {
        adopcionesAProcesar := resto(adopcionesAProcesar)    
        }
    return (not esVacía(adopcionesAProcesar))
}
function animal_EsElDeAdopción_(animal, adopción) {
    /*  PROPÓSITO: indica si el animal dado corresponde a la adopción dada
        PARÁMETROS:
            * animal: Animal
            * adopción: Adopción
        TIPO: Booleano
        PRECONDICIONES: no tiene*/    
    return (nombre(animal) == nombreAnimal(adopción))
}
function animalesDe_QueEstuvieronACargoDe_(listaDeAnimales, cuidador) {
    /*  PROPÓSITO: describe una lista de animales a partir de la lista dada, incluyendo sólo a los que estuvieron a cargo del cuidador dado
        PARÁMETROS:
            * listaDeAnimales: [Animal]
            * cuidador: Cuidador
        TIPO: Tipo
        PRECONDICIONES: no tiene
        OBSERVACIONES:
        Es un recorrido de filtro*/
    animalesACargoDelCuidadorHastaAhora := []
    foreach animal in listaDeAnimales {
        animalesACargoDelCuidadorHastaAhora := animalesACargoDelCuidadorHastaAhora ++
                                               singular_Si_(animal,
                                                            animal_EstáEn_(animal, animales(cuidador)))}    
    return (animalesACargoDelCuidadorHastaAhora)
}
function animal_EstáEn_(animal, listaDeAnimales) {
    /*  PROPÓSITO: indica si el animal dado se encuentra en la lista dada
        PARÁMETROS:
            * animal: Animal
            * listaDeAnimales: [Animal]
        TIPO: Booleano
        PRECONDICIONES: no tiene
        OBSERVACIONES: es un recorrido de búsqueda*/
    animalesAProcesar := listaDeAnimales
    while(not esVacía(animalesAProcesar) 
          &&
          nombre(animal) /= nombre(primero(animalesAProcesar))) {
        animalesAProcesar := resto(animalesAProcesar)    
    }
    return (not esVacía(animalesAProcesar))
}
// MI VERSION
Escriba la función animalesDelCuidador_QueFueronadoptadosEn_ que dado el nombre de un cuidador y
una protectora, describe la lista de animales que fueron adoptados y estaban a cargo del cuidador dado.Tener en
cuenta que podrían existir cuidadores que aun no participaron de ninguna adopción
function animalesDelCuidador_QueFueronadoptadosEn_(cuidador,protectora){
    /*  Proposito: describe una lista de animales de la protectora dada que fueron adoptados y estaban a cargo del cuidador dado.
        Precondicion: los cuidadores a evaluar participaron de la adopcion. tiene que existir el cuidador con el nombre dado.
        Parametros: cuidador: Cuidador
                    protectora: ProtectoraDeAnimales
        Tipo: [animales]
        Observaciones: es un recorrido de filtro.*/
    animalesAdoptados := []
    foreach animal in animales(protectora) {
        animalesAdoptados := animalesAdoptados ++ singular_Si_(animal, esAnimal_FueAdoptadoEn_QueFueCuidadoPor_(animal,protectora,cuidador))
    }
    return(animalesAdoptados)
}
function esAnimal_FueAdoptadoEn_QueFueCuidadoPor_(protectora,cuidador){
    /*  Proposito: indica si el animal "animal" dado fue adoptado en la "protectora" dada y que estuvo a cargo del "cuidador" dado.
        Precondiciones: ninguna.
        Parametros: protectora: Protectora.
                    cuidador: Cuidador.
                    animal: Animal
        Tipo: Booleano.*/
    return(es_AdoptadoEn_(animal,protectora) && es_CuidadoPor_(animal,cuidador))
}
function es_AdoptadoEn_(animal,protectora){
    /*   Proposito: indica si el "animal" dado figura dentro del listado de adopciones de la "protectora" dada.
        Precondiciones: ninguna.
        Parametros: animal:Animal
                    protectora: ProtectoraDeAnimales
        Tipo: Booleano.*/
    listaDeAnimalesARecorrer := animales(protectora)
    while (not esVacía(listaDeAnimalesARecorrer) && nombre(animal) /= (nombre(primero(listaDeAnimalesARecorrer))) {
        listaDeAnimalesARecorrer := resto(listaDeAnimalesARecorrer)
    }
    return (not esVacía(listaDeAnimalesARecorrer))
}
function es_CuidadoPor_(animal,cuidador){
    /*  Proposito: indica si el "animal" dado fue estuvo a cargo del "cuidador" dado.
        Precondicion: ninguna
        Parametros: animal: Animal.
                    cuidador: Cuidador.
        Tipo: Booleano.*/
    listaDeAnimalesARecorrer := animalesACargo(cuidador)
    while (not esVacía(listaDeAnimalesARecorrer) && nombre(animal) /= (nombre(primero(listaDeAnimalesARecorrer))) {
        listaDeAnimalesARecorrer := resto(listaDeAnimalesARecorrer)
    }
    return (not esVacía(listaDeAnimalesARecorrer))
}
//VERSION SABA PUNTO 4
function animalesRecuperadosAdoptadosPor_En_(listaDNISAdoptantes, protectora){
    /* PROPOSITO: describe los animales que fueron adoptados por 
            adoptantes responsables con dnis **listaDNISApdoptantes
            y ahora estan recupeardos.
        PRECONDICIONES:
            - los adoptantes responsables solo tienen una adopcion.
            - los dnisDEAdoptantes deben deben ser adoptantes de la protectora
            - los adoptantes en la lista deben tener una adopcion.
        PARAMETROS:
            - listaDNISAdoptantes: [String]
            - protectora: ProtectoraDeAnimales
        TIPO: [Animal]
        OBSERVACIONES: recorrido de filtro*/
    animalesRecuperadosPorAdoptante := []
    foreach animal in animales(protectora){
        animalesRecuperadosPorAdoptante := animalesRecuperadosPorAdoptante ++ 
            singular_Si_(animal, esAnimal_RecuperadoYPerteneceAUnAdoptanteDe_En_(animal,listaDNISAdoptantes,protectora))
    }
    return(animalesRecuperadosPorAdoptante)
}
function esAnimal_RecuperadoYPerteneceAUnAdoptanteDe_En_(animal, listaDNSAdpotantes, protectora){
    /*  PROPOSITO: indica si el animal esta recuperado y pertenece a alguno de los adoptantes de la lista dada.
        PRECONDICIONES:
            - El animal pertenece a la protectora dada.
        PARAMETROS:
            - listaDNISAdoptantes: [String]
            - protectora: ProtectoraDeAnimales
        TIPO: [Animal]*/    
    return(not enRecuperacion(animal) && estaAdoptado_En_(animal, protectora) &&
        contiene_A_(listaDNSAdpotantes, dniAdoptante(adopcionDel_En_(animal, protectora)))
    )
}
function estaAdoptado_En_(animal, protectora){
    /**/
    adopcionesARecorrer := adopciones(protectora)
    while(not esVacía(adopcionesARecorrer) && not esAdopcion_DelAnimal_(primero(adopcionesARecorrer), animal)   ){
        adopcionesARecorrer := resto(adopcionesARecorrer)
    }
    return(not esVacía(adopcionesARecorrer)) 
}
function esAdopcion_DelAnimal_(adopcion, animal){
    /**/
    
    return(nombreAnimal(adopcion == nombre(animal))
}
function adopcionDel_En_(animal, protectora){
    /**/
    adopcionesARecorrer := adopciones(protectora)
    
    while(not esAdopcion_DelAnimal_(primero(adopcionesARecorrer), animal)){
        adopcionesARecorrer := resto(adopcionesARecorrer)
    }
    return(primero(adopcionesARecorrer))
}




